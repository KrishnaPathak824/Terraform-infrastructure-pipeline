name: Infrastructure CI/CD EC2
on:
  pull_request:
    types: [opened, synchronize, closed]
    branches:
      - main

permissions:              
  contents: read
  pull-requests: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run AWS commands
        run: |
          aws s3 ls

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.12.0

      - name: Init Terraform
        id: init
        working-directory: terraform-ec2
        run: |
          terraform init | tee init_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Debug - Show init output
        run: cat terraform-ec2/init_output.txt || echo "init_output.txt not found"

      - name: Comment Terraform Plan on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SECRET_KEY }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('ec2-project/init_output.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform Init Output for \`ec2-project\`
              \n\n\`\`\`hcl\n${plan}\n\`\`\``
              });

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0

      - name: Init TFLint
        working-directory: terraform-ec2
        run: tflint --init

      - name: Run TFLint
        working-directory: terraform-ec2
        id: tflint
        run: |
          tflint -f compact | tee tflint_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Post TFLint Comment
        uses: GetTerminus/terraform-pr-commenter@v3
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_KEY }}
        with:
          commenter_type: tflint
          commenter_input: terraform-ec2/tflint_output.txt
          commenter_exitcode: ${{ steps.tflint.outputs.exitcode }}

      - name: Run Terraform format
        working-directory: terraform-ec2
        id: fmt
        run: |
          terraform fmt -check | tee fmt_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Post Format Comment
        uses: GetTerminus/terraform-pr-commenter@v3
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_KEY }}
        with:
          commenter_type: fmt
          commenter_input: terraform-ec2/fmt_output.txt
          commenter_exitcode: ${{ steps.fmt.outputs.exitcode }}

      - name: Terraform Validate
        id: validate
        working-directory: terraform-ec2
        run: |
          terraform validate | tee validate_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Post TF Validate Comment
        uses: GetTerminus/terraform-pr-commenter@v3
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_KEY }}
        with:
          commenter_type: validate
          commenter_input: terraform-ec2/validate_output.txt
          commenter_exitcode: ${{ steps.validate.outputs.exitcode }}

  security-check:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.12.0

      - name: Init Terraform
        working-directory: terraform-ec2
        id: init
        run: | 
          terraform init 

      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ github.token }}

          
  terraform-plan:
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.12.0

      - name: Init Terraform
        working-directory: terraform-ec2
        id: init
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform-ec2
        id: plan
        run: |
          terraform plan  | tee tfplan.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Debug - Show plan output
        run: cat terraform-ec2/tfplan.txt || echo "tfplan.txt not found"

      - name: Copy file for commenter
        run: |
          cp terraform-ec2/tfplan.txt ./tfplan.txt
          echo "File copied successfully"

      - name: Post Plan Comment
        if: ${{ always() }}
        uses: GetTerminus/terraform-pr-commenter@v3
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_KEY }}
        with:
          commenter_type: plan
          commenter_input: tfplan.txt
          commenter_exitcode: ${{ steps.plan.outputs.exitcode }}
          commenter_debug: true

  build-artifact:
    runs-on: ubuntu-latest  
    needs: terraform-plan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4      

      - name: Create release artifact
        working-directory: terraform-ec2
        run: |
          zip -r release.zip . -x '*.git*' 
          mkdir -p release-artifacts
          mv release.zip release-artifacts/

      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          latest_tag=$(git tag --sort=-v:refname | head -n 1)
          echo "Latest tag: $latest_tag"
          echo "latest_tag=$latest_tag" >> $GITHUB_OUTPUT

      - name: Calculate next tag
        id: calc_tag
        run: |
          old=${{ steps.get_tag.outputs.latest_tag }}
          if [ -z "$old" ]; then
            echo "No previous tag, starting at v0.1.0"
            echo "new_tag=v0.1.0" >> $GITHUB_OUTPUT
          else
            IFS='.' read -r major minor patch <<<"${old#v}"
            patch=$((patch + 1))
            echo "new_tag=v${major}.${minor}.${patch}" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Tag
        uses: mathieudutour/github-tag-action@v6.1
        with:
          github_token: ${{ secrets.SECRET_KEY }}
          custom_tag: ${{ steps.calc_tag.outputs.new_tag }}
          tag_prefix: ""

      - name: Create GitHub Release
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.SECRET_KEY }}
          automatic_release_tag: ${{ steps.calc_tag.outputs.new_tag }}
          prerelease: false
          title: Release ${{ steps.calc_tag.outputs.new_tag }}
          files: terraform-ec2/release-artifacts/release.zip

      - name: Add PR Comment
        uses: mshick/add-pr-comment@v2
        with:
          message: |
            A new release **${{ steps.calc_tag.outputs.new_tag }}** was created.
            See the release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.calc_tag.outputs.new_tag }}
          repo-token: ${{ secrets.SECRET_KEY }}
          allow-repeats: false

    