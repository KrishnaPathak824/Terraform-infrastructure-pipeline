name: Infrastructure CI/CD S3
on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main

permissions:              
  contents: read
  pull-requests: write

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Run AWS commands
        run: |
          aws s3 ls

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.12.0

      - name: Init Terraform
        id: init
        working-directory: terraform-s3bucket
        run: |
          terraform init  | tee init_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0

      - name: Init TFLint
        working-directory: terraform-s3bucket
        run: |
          tflint --init
          tflint --version

      - name: Run TFLint
        working-directory: terraform-s3bucket
        id: tflint
        run: |
          tflint -f compact | tee tflint_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Cat TFLint
        run: |
          cat terraform-s3bucket/tflint_output.txt || echo "tflint_output.txt not found"

      - name: Comment Terraform TFLint
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SECRET_KEY }}
          script: |
            const fs = require('fs');
            const lint = fs.readFileSync('terraform-s3bucket/tflint_output.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform TFLint Output for \`ec2-instance\`
              \n\n\`\`\`hcl\n${lint}\n\`\`\``
              });

      - name: Run Terraform format
        working-directory: terraform-s3bucket
        id: fmt
        run: |
          terraform fmt -no-color -check | tee fmt_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Comment Terraform TF Format
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SECRET_KEY }}
          script: |
            const fs = require('fs');
            const fmt = fs.readFileSync('terraform-s3bucket/fmt_output.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform TF Format Output for \`ec2-instance\`
              \n\n\`\`\`hcl\n${fmt}\n\`\`\``
              });

      - name: Terraform Validate
        id: validate
        working-directory: terraform-s3bucket
        run: |
          terraform validate -no-color | tee validate_output.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT
        continue-on-error: true

      - name: Comment Terraform TF Validate
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SECRET_KEY }}
          script: |
            const fs = require('fs');
            const validate = fs.readFileSync('terraform-s3bucket/validate_output.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform TF Validate Output for \`ec2-instance\`
              \n\n\`\`\`hcl\n${validate}\n\`\`\``
              });

  security-check:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.12.0

      - name: Init Terraform
        working-directory: terraform-s3bucket
        id: init
        run: | 
          terraform init 

      - name: tfsec
        uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
        with:
          github_token: ${{ github.token }}

          
  terraform-plan:
    runs-on: ubuntu-latest
    needs: security-check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Setup terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.12.0

      - name: Init Terraform
        working-directory: terraform-s3bucket
        id: init
        run: terraform init

      - name: Terraform Plan
        working-directory: terraform-s3bucket
        id: plan
        run: |
          terraform plan -no-color  | tee tfplan.txt
          echo "exitcode=$?" >> $GITHUB_OUTPUT

      - name: Comment Terraform TFPlan
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.SECRET_KEY }}
          script: |
            const fs = require('fs');
            const tfplan = fs.readFileSync('terraform-s3bucket/tfplan.txt', 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## Terraform TFPlan Output for \`ec2-instance\`
              \n\n\`\`\`hcl\n${tfplan}\n\`\`\``
              });

  build-artifact:
    runs-on: ubuntu-latest  
    needs: terraform-plan

    steps:
    - name: Checkout code
      uses: actions/checkout@v4      

    - name: Create release artifact
      working-directory: terraform-s3bucket
      run: |
        zip -r release-s3.zip . -x '*.git*'
        mkdir -p release-artifacts
        mv release-s3.zip release-artifacts/

    - name: Install semver-tool
      run: |
        sudo curl -sSL https://raw.githubusercontent.com/fsaintjacques/semver-tool/3.0.0/src/semver \
          -o /usr/local/bin/semver && sudo chmod +x /usr/local/bin/semver

    - name: Calculate new semver tag
      id: semver
      run: |
        git fetch --tags

        last_version=$(git tag --sort=-v:refname | grep '\-s3$' | head -n 1 | sed 's/-s3//' | sed 's/^v//')

        branch="${GITHUB_REF##*/}"
        if [[ -z "$last_version" ]]; then
          new_version="1.0.0"
        elif [[ "$branch" == *"major"* ]]; then
          new_version=$(semver bump major "$last_version")
        elif [[ "$branch" == *"feat"* || "$branch" == *"minor"* ]]; then
          new_version=$(semver bump minor "$last_version")
        else
          new_version=$(semver bump patch "$last_version")
        fi

        new_tag="v${new_version}-s3"
        echo "Calculated new tag: $new_tag"
        echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

    - name: Create Git tag
      run: |
        git config user.name "github-actions"
        git config user.email "github-actions@github.com"
        git tag ${{ steps.semver.outputs.new_tag }}
        git remote set-url origin https://x-access-token:${{ secrets.SECRET_KEY }}@github.com/${{ github.repository }}.git
        git push origin ${{ steps.semver.outputs.new_tag }}

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.semver.outputs.new_tag }}
        name: Release ${{ steps.semver.outputs.new_tag }}
        files: terraform-s3bucket/release-artifacts/release-s3.zip
      env:
        GITHUB_TOKEN: ${{ secrets.SECRET_KEY }}

    - name: Add PR Comment
      uses: mshick/add-pr-comment@v2
      with:
        message: |
            A new release **${{ steps.semver.outputs.new_tag }}** was created.
            See the release:(https://github.com/${{ github.repository }}/releases/tag/${{ steps.semver.outputs.new_tag }})
        repo-token: ${{ secrets.SECRET_KEY }}
        allow-repeats: false


    